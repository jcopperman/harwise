import { writeFileSync } from 'fs';
export function generateCurlSuite(samples, outputFile, options = {}) {
    const maskSet = new Set(options.maskHeaders || ['authorization', 'cookie']);
    let script = '#!/bin/bash\n\n';
    if (options.strict) {
        script += 'set -euo pipefail\n\n';
    }
    script += '# Generated by harwise\n';
    script += `# Date: ${new Date().toISOString()}\n`;
    script += `# Samples: ${samples.length}\n\n`;
    samples.forEach((sample, index) => {
        script += `# Request ${index + 1}: ${sample.method} ${sample.url}\n`;
        script += `# Original timing: ${sample.time}ms, size: ${sample.size} bytes\n`;
        // Build curl command
        let curlCmd = 'curl';
        // Add method if not GET
        if (sample.method !== 'GET') {
            curlCmd += ` -X ${sample.method}`;
        }
        // Add URL
        const url = options.baseUrl ? normalizeUrl(sample.url, options.baseUrl) : sample.url;
        curlCmd += ` "${url}"`;
        // Add headers
        for (const [key, value] of Object.entries(sample.reqHeaders)) {
            if (!maskSet.has(key.toLowerCase())) {
                curlCmd += ` \\\n  -H "${key}: ${value}"`;
            }
            else {
                curlCmd += ` \\\n  -H "${key}: [MASKED]"`;
            }
        }
        // Add body if present
        if (sample.reqBody) {
            const contentType = sample.reqHeaders['content-type'] || sample.reqHeaders['Content-Type'] || '';
            if (contentType.includes('application/json')) {
                curlCmd += ` \\\n  -d '${sample.reqBody}'`;
            }
            else if (contentType.includes('application/x-www-form-urlencoded')) {
                curlCmd += ` \\\n  -d "${sample.reqBody}"`;
            }
            else {
                curlCmd += ` \\\n  --data-binary "${sample.reqBody}"`;
            }
        }
        // Add timing and output options
        curlCmd += ' \\\n  -w "\\nTime: %{time_total}s\\nSize: %{size_download} bytes\\nStatus: %{http_code}\\n"';
        script += curlCmd + '\n\n';
    });
    writeFileSync(outputFile, script);
    console.log(`Curl suite generated: ${outputFile}`);
}
function normalizeUrl(url, baseUrl) {
    if (!baseUrl)
        return url;
    try {
        const u = new URL(url);
        const b = new URL(baseUrl);
        if (u.origin === b.origin) {
            return `${baseUrl}${u.pathname}${u.search}`;
        }
    }
    catch {
        // fallback
    }
    return url;
}
